#include<iostream>
#include<fstream>
#include<typeinfo>
#include<string>
#include <vector>
#include <malloc.h>
#include <memory.h>
/* 4.6??∑⁄?????????????????????????????????????????????????????????txt????*/
using namespace std;
const int MAX_Vertex_Num=5018;
int vexs[MAX_Vertex_Num]={0};
int arcs[MAX_Vertex_Num][MAX_Vertex_Num]; //??????
int vexnum=5018;//??????
int arcnum=5031;//????
int count=0;

vector<vector<int>> out_3, out_4, out_5, out_6, out_7;

void CreateGraph();//?????
void CheckCircle();
void DFS(int x,bool visited[MAX_Vertex_Num],int stack[MAX_Vertex_Num],int& top,bool inStack[MAX_Vertex_Num],int& count);
//
int get_position(int arr[],int x,int len);
bool myFunction(int arr[], int v);
void quickSort(int a[],int,int);

int get_position(int arr[],int x,int len){
	for(int i=0;i<len;i++){
		if (arr[i]==x){
			return i;
			}
		}
}

vector<string> split(const string& src, string separate_character)
{
	vector<string> strs;
	int separate_characterLen = separate_character.size();//?????????????,?????????????≥è,,???????????????
	int lastPosition = 0, index = -1;
	while (-1 != (index = src.find(separate_character, lastPosition)))
	{
		strs.push_back(src.substr(lastPosition, index - lastPosition));
		lastPosition = index + separate_characterLen;
	}
	string lastString = src.substr(lastPosition);//?????????????????????
	if (!lastString.empty())
		strs.push_back(lastString);//??????????????????????????
	return strs;
}

void quickSort(int s[], int l, int r)
{
	if (l< r)
	{      
		int i = l, j = r, x = s[l];
		while (i < j)
		{
			while(i < j && s[j]>= x) // ??????????????ß≥??x????
				j--; 
			if(i < j)
				s[i++] = s[j];
			while(i < j && s[i]< x) // ?????????????????????x????
				i++; 
			if(i < j)
				s[j--] = s[i];
		}
		s[i] = x;
		quickSort(s, l, i - 1); // ??????
		quickSort(s, i + 1, r);
	}
}

bool in_array(int arr[],int v){
	for(int i=0;i<MAX_Vertex_Num;i++){
		if (arr[i]==v){
			return true;
			}
		}
	return false;
}

void CreateGraph()
{
	int v;//?????????,???????vector<>???????
	int edges[arcnum][2] = { 0 };//???????arcnum*2???????????????
	int vexs_data[vexnum] = { 0 };
	int i=0;
	int k=0;
	string temp;
	string del =",";
	ifstream infile;//??????????????????????????in
	infile.open("test.txt");//?????
	while(!infile.eof())
	{
		infile>>temp;
		vector<string> strs = split(temp,del);
		for (int j = 0; j < strs.size()-1; j++)
		{
			v=std::stoi(strs[j]);
			edges[i][j]=v;
			if(!in_array(vexs_data,v)){
				vexs_data[k]=v;
				k=k+1;
			}
		}
		i=i+1;
	}
	
	int len=sizeof(vexs_data)/sizeof(int);
	quickSort(vexs_data,0,len-1);
    
	//vexnum?????????? vexs_data?õ•???????????? 
	for (int i=0;i<vexnum;i++)
	{
		vexs[i]=vexs_data[i];
	}
	
	for (int i=0;i<vexnum;i++)
	{
		for (int j=0;j<vexnum;j++)
		{
			arcs[i][j]=0;
		}
	}
	
	for (int i=0;i<arcnum;i++)
	{
		int x=get_position(vexs_data,edges[i][0],len);
		int y=get_position(vexs_data,edges[i][1],len);
		
		//cout<<x<<' '<<y<<endl;
		arcs[x][y]=1;//??????????????????????arc[x][y]=??
		//cout<<arcs[x][y]<<endl;
	}
}


void CheckCircle()
{
	//int count=0;//???????
	int top=-1;
	int stack[MAX_Vertex_Num];//????????????5?????ÔÖ???????? 
	bool inStack[MAX_Vertex_Num]={false};// ???????????????? 
	bool visited[MAX_Vertex_Num]={false};//??????? 
	for (int i=0;i<vexnum;i++)
	{
		if (!visited[i]) //?????????????????ß“????????????dfs???? 
		{
			cout<<vexs[i]<<" ";
			DFS(i,visited,stack,top,inStack,count);
		}
	}
}

void DFS(int x,bool visited[MAX_Vertex_Num],int stack[MAX_Vertex_Num],int& top,bool inStack[MAX_Vertex_Num],int& count)
{
	vector<int> output;
	int insert_loc;
	visited[x]=true; //????????????x=0????visited[x]?????true ????????????? 
	stack[++top]=x;//top??-1?????++top=0,????x=0????? 
	inStack[x]=true;//x=0??????instack[0]?????true?????x=0????? 
	for (int i=0;i<vexnum;i++) //???????????x???????1??????????x?????ß‹????? 
	{
		if (arcs[x][i]!=0)//?ß“?????x=0?????1??2
		{
			if (!inStack[i])//???????????1?????1??????ßµ??????1????DFS??...visit[1]??stack[1]??????????????x=2?? 
			{             
				DFS(i,visited,stack,top,inStack,count);
			}
			else //??????????????°¿??x=2????? ?°¿??i=0??????ß›?
			{
				int len_circle=0;
				//??i??x?????????top??¶À????x=2???°¿??i?????????ß÷?¶À?????????
				//??????????x=0?°¿?????ß÷?¶À??
				int t=0;
				for (t=top;stack[t]!=i;t--);//t=2????????stack[t]==i(i=0)????????????????????¶À?®¢? 
				//??????ßÿ???
				for (int j=t;j<=top;j++)//top???ß≥??????ß÷???????????2??top?????? 
				{
					output.emplace_back(vexs[stack[j]]);
					len_circle++;
				}
				if(len_circle<8 && len_circle>2){
					if(len_circle == 3)	out_3.emplace_back(output);
					if(len_circle == 4)	out_4.emplace_back(output);
					if(len_circle == 5)	out_5.emplace_back(output);
					if(len_circle == 6)	out_6.emplace_back(output);
					if(len_circle == 7)	out_7.emplace_back(output);
				}
				output.clear();
			}
		}
	}
	//????????????
	top--;
	inStack[x]=false;
}

int main()
{
	CreateGraph();
	CheckCircle();
	cout<<count<<endl;
	
	//????????3????
	cout<<"?????3???:"<<endl; 
	for(int i=0;i<out_3.size();i++){
		if(out_3[i][0]!=0){
			for(int j=0;j<3;j++){
			cout<<out_3[i][j]<<"->";
			}
			cout<<endl;
		}
	} 
	cout<<"test"<<endl;
	cout<<"?????4???:"<<endl; 
	for(int i=0;i<out_4.size();i++){
		if(out_4[i][0]!=0){
			for(int j=0;j<4;j++){
			cout<<out_4[i][j]<<"->";
			}
			cout<<endl;
		}
	} 
	cout<<"?????5???:"<<endl; 
	for(int i=0;i<out_5.size();i++){
		if(out_5[i][0]!=0){
			for(int j=0;j<5;j++){
			cout<<out_5[i][j]<<"->";
			}
			cout<<endl;
		}
		
	} 
	cout<<"?????6???:"<<endl; 
	for(int i=0;i<out_6.size();i++){
		if(out_6[i][0]!=0){
			for(int j=0;j<6;j++){
			cout<<out_6[i][j]<<"->";
			}
			cout<<endl;
		}
	} 
	cout<<"?????7???:"<<endl; 
	for(int i=0;i<out_7.size();i++){
		if(out_7[i][0]!=0){
			for(int j=0;j<7;j++){
			cout<<out_7[i][j]<<"->";
			}
			cout<<endl;
		}
	} 
	
	system("pause");
	return 1;
}
